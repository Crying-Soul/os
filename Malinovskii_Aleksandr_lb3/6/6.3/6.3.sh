#!/bin/bash
# =============================================================================
# Скрипт демонстрации работы с pipe (каналами) в Linux
# =============================================================================
# Цель:
# Демонстрация различных аспектов работы с pipe (каналами) в Linux, включая
# создание, перенаправление ввода/вывода и анализ ограничений. Скрипт
# демонстрирует как анонимные, так и именованные каналы, а также предоставляет
# информацию о системных ограничениях, связанных с использованием каналов.
#
# Описание:
# Скрипт выполняет следующие действия:
# 1. Демонстрирует анонимные каналы с помощью простых команд (ls, grep, seq, ps, wc)
# 2. Выводит информацию о системных ограничениях, связанных с каналами:
#     - Максимальный размер буфера pipe
#     - Ограничения на количество pipe для пользователя
#     - Общие ограничения на открытые файлы
#     - Размер страницы памяти
# 3. Предоставляет информацию о конфигурационных файлах для настройки ограничений.
# 4. Компилирует и запускает три программы на C:
#     - simple_pipe.c: Простой пример передачи сообщения через pipe.
#     - dual_pipe.c: Двусторонний обмен данными через два pipe.
#     - pipe_exec.c: Использование pipe и dup2 для перенаправления ввода/вывода.
# 5. Трассирует системные вызовы, выполняемые программами на C, с помощью strace.
# 6. Удаляет исполняемые файлы после завершения демонстрации.
#
# Зависимости:
#   - gcc
#   - strace
#   - coreutils (ls, grep, seq, ps, wc, cat, stat)
#
# Использование:
#   Запустите скрипт без аргументов.
#
# Примечания:
#   - Скрипт предполагает, что необходимые утилиты (gcc, strace, coreutils)
#     установлены в системе.
#   - Для просмотра всех системных вызовов можно убрать фильтрацию strace.
#   - Именованные каналы (FIFO) не включены в этот скрипт, так как они создаются
#     в ЗАДАНИИ 6.2
# =============================================================================


cd 6/6.3
echo "=============================================="
echo "                  ЗАДАНИЕ 6.3                 "
echo "=============================================="
# Файлы с ограничениями IPC и их описания
declare -A IPC_INFO=(
    ["/proc/sys/kernel/msgmax"]="Максимальный размер одного сообщения в очереди (в байтах). Например, 8192 = 8 КБ."
    ["/proc/sys/kernel/msgmnb"]="Максимальный размер одной очереди сообщений (в байтах). Например, 16384 = 16 КБ."
    ["/proc/sys/kernel/msgmni"]="Максимальное количество очередей сообщений в системе. Например, 32000."
    ["/proc/sys/kernel/shmmax"]="Максимальный размер сегмента shared memory (в байтах). Например, 18446744073692774399 = 16 эксабайт (практически не ограничено)."
    ["/proc/sys/kernel/shmall"]="Общий объем shared memory, который может быть выделен (в страницах памяти). Например, 4294967296 = 16 ТБ (при размере страницы 4 КБ)."
    ["/proc/sys/kernel/sem"]="Параметры семафоров в формате: [1]макс. семафоров в системе [2]макс. операций за вызов [3]макс. системных семафоров [4]макс. очередей семафоров."
)

echo "=== Текущие ограничения IPC в системе ==="
echo "Все пути указаны в абсолютном формате (/proc/sys/kernel/...)"
echo "----------------------------------------"

for file in "${!IPC_INFO[@]}"; do
    if [[ -f "$file" ]]; then
        echo "● Путь: $file"
        echo "  Значение: $(cat "$file")"
        echo "  Описание: ${IPC_INFO[$file]}"
        echo "----------------------------------------"
    else
        echo "⚠ Файл $file не найден!" >&2
    fi

done

gcc -o queue message_queue.c
strace -f -e trace=ipc,msgget,msgsnd,msgrcv,msgctl ./queue
rm queue