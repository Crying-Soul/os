#!/bin/bash
# =============================================================================
# Скрипт для тестирования TCP и UDP серверов с переменным числом клиентов
# =============================================================================
# Цель:
#   Автоматизированное тестирование TCP и UDP серверов с разным количеством
#   клиентов для оценки производительности и стабильности. Скрипт компилирует
#   серверные и клиентские программы, запускает их с указанным числом
#   клиентов и измеряет общее время выполнения.
#
# Описание:
#   Скрипт выполняет следующие действия:
#     1. Компилирует серверные программы "tcp_server.c" и "udp_server.c", а
#        также клиентскую программу "client.c".
#     2. Определяет функцию `run_test`, которая принимает протокол ("tcp" или
#        "udp") и число клиентов в качестве аргументов.
#     3. Внутри `run_test`:
#        - Запускает соответствующий сервер в фоновом режиме.
#        - Запускает указанное число клиентов в фоновом режиме.
#        - Ожидает завершения работы сервера.
#        - Измеряет общее время выполнения, используя `date` и `bc`.
#     4. Запускает тесты с разным количеством клиентов (10, 100, 1000) для
#        обоих протоколов (TCP и UDP).
#     5. Удаляет исполняемые файлы после завершения всех тестов.
#
# Используемые инструменты:
#   - `gcc`: Компилятор C.
#   - `bc`:  Калькулятор командной строки для выполнения арифметических
#      операций с плавающей точкой.
#   - `kill`: Утилита для завершения процессов.
#   - `wait`:  Утилита для ожидания завершения дочерних процессов.
#   - `date`:  Утилита для получения текущей даты и времени.
#   - `seq`:   Утилита для генерации последовательности чисел.
#
# Параметры:
#   Нет. Скрипт не принимает аргументов командной строки.  Число клиентов и
#   протокол задаются внутри скрипта.
#
# Зависимости:
#   - gcc
#   - bc
#
# Вывод:
#   Скрипт выводит сообщения о ходе выполнения, а также общее время
#   выполнения для каждого теста (протокол и число клиентов).
#
# Примечания:
#   - Перед запуском скрипта убедитесь, что у вас есть исходные файлы
#     "tcp_server.c", "udp_server.c" и "client.c" в текущем каталоге.
#   - Внутри клиентской программы, как TCP, так и UDP, нужно реализовать логику
#     подключения к соответствующему серверу и отправки сообщения.
#   - Убедитесь, что на сервере реализована логика обработки входящих
#     соединений/дейтаграмм и завершения работы после обработки всех клиентов.
#   - Для TCP нужно предусмотреть таймауты, чтобы сервер не зависал, если
#     какой-то клиент не подключится.
# =============================================================================

cd 7/7.3
# Компиляция всех программ
gcc tcp_server.c -o server_tcp -lpthread
gcc udp_server.c -o server_udp
gcc client.c -o client

run_test() {
    local protocol=$1
    local num_clients=$2
    
    echo -e "\n=== Testing $num_clients $protocol clients ==="
    
    # Запуск сервера с исправленным аргументом
    ./server_"$1" $num_clients &
    SERVER_PID=$!

    # Замер времени начала
    START_TIME=$(date +%s.%N)
    
    # Запуск клиентов
    for i in $(seq 1 $num_clients); do
        ./client $protocol "CLIENT_$i" >/dev/null 2>&1 &
    done
    
    # Ожидание завершения сервера
    wait $SERVER_PID 2>/dev/null
    
    # Замер времени окончания
    END_TIME=$(date +%s.%N)
    
    # Вычисление времени
    ELAPSED=$(echo "$END_TIME - $START_TIME" | bc)
    echo "Total time: $ELAPSED seconds"
}


# Тестируемые количества клиентов
CLIENT_COUNTS=(10 100 1000)

 # Тестируем TCP
 for count in "${CLIENT_COUNTS[@]}"; do
    run_test "tcp" $count
 done

# Тестируем UDP
for count in "${CLIENT_COUNTS[@]}"; do
    run_test "udp" $count
done

rm client server_tcp server_udp
echo -e "\nAll tests completed"