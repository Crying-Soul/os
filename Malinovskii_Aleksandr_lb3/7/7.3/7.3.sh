#!/bin/bash
# =============================================================================
# Скрипт для тестирования TCP и UDP серверов с трассировкой (strace)
# =============================================================================
# Цель:
#   Компиляция, запуск и тестирование TCP и UDP серверов с ограниченным
#   количеством клиентов (10). Скрипт собирает трассировку системных вызовов
#   сервера и одного клиента для анализа сетевого взаимодействия.
#
# Описание:
#   Скрипт выполняет следующие действия:
#     1. Компилирует серверные программы "tcp_server.c" и "udp_server.c", а
#        также клиентскую программу "client.c".
#     2. Определяет функцию `run_test`, которая принимает протокол ("tcp" или
#        "udp") и число клиентов в качестве аргументов.
#     3. Внутри `run_test`:
#        - Запускает соответствующий сервер в фоновом режиме с трассировкой
#          системных вызовов с помощью `strace`.  Трассировка сохраняется в
#          файл "<protocol>_server.log".
#        - Запускает указанное число клиентов в фоновом режиме. Трассируется
#          только первый клиент, и вывод сохраняется в файл
#          "<protocol>_client.log".
#        - Ожидает завершения работы сервера.
#        - Измеряет общее время выполнения, используя `date` и `bc`.
#     4. Запускает тесты с 10 клиентами для обоих протоколов (TCP и UDP).
#     5. Выводит содержимое файлов трассировки сервера.
#     6. Удаляет исполняемые файлы и файлы трассировки после завершения всех
#        тестов.
#
# Используемые инструменты:
#   - `gcc`: Компилятор C.
#   - `strace`: Утилита для трассировки системных вызовов.
#   - `bc`:  Калькулятор командной строки для выполнения арифметических
#      операций с плавающей точкой.
#   - `kill`: Утилита для завершения процессов.
#   - `wait`:  Утилита для ожидания завершения дочерних процессов.
#   - `date`:  Утилита для получения текущей даты и времени.
#   - `seq`:   Утилита для генерации последовательности чисел.
#   - `cat`:   Утилита для вывода содержимого файлов.
#
# Параметры:
#   Нет. Скрипт не принимает аргументов командной строки. Число клиентов (10)
#   и протокол задаются внутри скрипта.
#
# Зависимости:
#   - gcc
#   - strace
#   - bc
#
# Вывод:
#   Скрипт выводит сообщения о ходе выполнения, общее время выполнения для
#   каждого теста, а также содержимое файлов трассировки сервера и клиента.
#
# Примечания:
#   - Перед запуском скрипта убедитесь, что у вас есть исходные файлы
#     "tcp_server.c", "udp_server.c" и "client.c" в текущем каталоге.
#   - Скрипт собирает трассировку только для 10 клиентов.
#   - Скрипт логирует только системные вызовы сервера, а не клиента.
#   - Результаты тестов сохраняются в файлах "*_server.log" и "*_client.log".
#   - Для работы сервера необходимо, чтобы он обрабатывал все подключения,
#     предотвращая зависания.
# =============================================================================


cd 7/7.3
echo "=============================================="
echo "                  ЗАДАНИЕ 7.3                 "
echo "=============================================="
# Компиляция всех программ
gcc tcp_server.c -o server_tcp -lpthread
gcc udp_server.c -o server_udp
gcc client.c -o client

run_test() {
    local protocol=$1
    local num_clients=$2
    
    echo -e "\n=== Testing $num_clients $protocol clients ==="
    
    # Запуск сервера (логируем только для 10 клиентов)
    if [ $num_clients -eq 10 ]; then
        strace ./server_"$protocol" $num_clients > "$protocol"_server.log 2>&1 &
    else
        strace ./server_"$protocol" $num_clients > /dev/null 2>&1 &
    fi
    SERVER_PID=$!
    
    sleep 1  # Даем серверу время на запуск
    
    START_TIME=$(date +%s.%N)
    
    # Запуск клиентов
    for i in $(seq 1 $num_clients); do
        if [ $num_clients -eq 10 ] && [ $i -eq 1 ]; then
            # Логируем только первого клиента в тесте с 10
            strace -o "$protocol"_client.log ./client $protocol "CLIENT_$i" > /dev/null 2>&1 &
        else
            ./client $protocol "CLIENT_$i" > /dev/null 2>&1 &
        fi
    done
    
    wait $SERVER_PID 2>/dev/null
    END_TIME=$(date +%s.%N)
    ELAPSED=$(echo "$END_TIME - $START_TIME" | bc)
    echo "Total time: $ELAPSED seconds"
}

CLIENT_COUNTS=(10)

 # Тестируем TCP
 for count in "${CLIENT_COUNTS[@]}"; do
    run_test "tcp" $count
 done

# Тестируем UDP
for count in "${CLIENT_COUNTS[@]}"; do
    run_test "udp" $count
done


echo "=============================================="
echo "           TCP server log (10 clients)        "
echo "=============================================="
cat tcp_server.log
echo "=============================================="
echo "           UDP server log (10 clients)        "
echo "=============================================="
cat udp_server.log

rm client server_tcp server_udp tcp_client.log tcp_server.log udp_client.log udp_server.log
echo -e "\nAll tests completed"