#!/bin/bash
set -euo pipefail

# Функция для очистки фоновых процессов при завершении скрипта
cleanup() {
  echo "Очистка фоновых процессов..."
  for pid in "${job_pids[@]:-}"; do
    if kill -0 "$pid" 2>/dev/null; then
      echo "Останавливаем процесс с PID $pid"
      kill -9 "$pid" 2>/dev/null || true  # Жесткий сигнал для завершения
    fi
  done
  echo "Очистка завершена."
}

# Трап для вызова cleanup при завершении скрипта или получении сигнала
trap cleanup EXIT

echo "Запуск фоновых процессов..."

# Массив для хранения PID запущенных процессов
job_pids=()

# Задание 1: имитация работы утилиты `top` с ограничением по времени
echo "Запуск задания 1: имитация работы утилиты 'top'..."
top -b -d 1 -n 5 > /dev/null 2>&1 &
job1_pid=$!
job_pids+=("$job1_pid")
echo "Задание 1 (PID $job1_pid) запущено: имитация работы 'top' (5 итераций)."

# Задание 2: имитация работы утилиты `dd`
echo "Запуск задания 2: имитация работы утилиты 'dd'..."
dd if=/dev/zero of=/dev/null bs=1M &
job2_pid=$!
job_pids+=("$job2_pid")
echo "Задание 2 (PID $job2_pid) запущено: имитация работы 'dd'."

# Задание 3: имитация работы утилиты `tar`
echo "Запуск задания 3: имитация работы утилиты 'tar'..."
tar cf /dev/null /usr/bin > /dev/null 2>&1 &
job3_pid=$!
job_pids+=("$job3_pid")
echo "Задание 3 (PID $job3_pid) запущено: имитация работы 'tar'."

# Вывод списка текущих заданий
echo -e "\nАнализ списка заданий:"
jobs -l

# Прерывание задания 2 (если оно еще выполняется)
echo -e "\nПрерывание задания 2 (имитация 'dd')..."
if kill -0 "$job2_pid" 2>/dev/null; then
    echo "Выполняем команду: kill -9 $job2_pid"
    kill -9 "$job2_pid" 2>/dev/null && echo "Задание 2 (PID $job2_pid) было прервано." || echo "Не удалось прервать задание 2."
else
    echo "Задание 2 уже завершилось или его нельзя прервать."
fi
sleep 1

# Вывод списка заданий после прерывания
echo -e "\nАнализ списка заданий после прерывания задания 2:"
jobs -l

# Ожидание завершения задания 1
echo -e "\nОжидание завершения задания 1 (имитация 'top')..."
if wait "$job1_pid"; then
    echo "Задание 1 (PID $job1_pid) успешно завершено."
else
    echo "Задание 1 завершилось с ошибкой."
fi

# Вывод итогового списка заданий
echo -e "\nИтоговый анализ списка заданий:"
jobs -l

echo -e "\nСкрипт завершен."